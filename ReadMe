# Multi-Threaded Card Game Simulation

A Java-based multi-threaded card playing simulation developed as part of ECM2414 Software Development coursework. This project implements a thread-safe card game where n players compete to collect four cards of the same denomination.

## 🎯 Project Overview

The game simulates a card playing environment where:
- **n players** (numbered 1 to n) each hold 4 cards
- **n decks** of cards arranged in a ring topology
- Players attempt to collect 4 cards of the same value to win
- Multi-threaded implementation ensures concurrent gameplay

## 🏗️ Game Architecture

### Ring Topology
Players and decks are arranged in a circular formation:
```
player1 → deck1 → player2 → deck2 → ... → playern → deckn → player1
```

### Game Flow
1. **Setup**: Distribute 4 cards to each player in round-robin fashion
2. **Deck Filling**: Fill remaining cards into decks (round-robin)
3. **Gameplay**: Players simultaneously draw from left deck and discard to right deck
4. **Victory**: First player with 4 matching cards wins

## 🚀 Getting Started

### Prerequisites
- Java Development Kit (JDK) 8 or higher
- JUnit 4.x or 5.x for testing

### Running the Game

1. **Compile and run the executable JAR:**
   ```bash
   java -jar cards.jar
   ```

2. **Follow the prompts:**
   - Enter number of players (n)
   - Provide path to valid pack file

### Input Pack Format
- Plain text file with 8n lines
- Each line contains a single non-negative integer
- Example for 4 players (32 cards total):
  ```
  1
  2
  3
  4
  1
  2
  ...
  ```

## 📁 Project Structure

```
├── src/
│   ├── CardGame.java          # Main executable class
│   ├── Card.java              # Thread-safe Card class
│   ├── Player.java            # Thread-safe Player class
│   ├── CardDeck.java          # Thread-safe CardDeck class
│   └── ...
├── tests/
│   ├── CardTest.java
│   ├── PlayerTest.java
│   └── ...
├── cards.jar                  # Executable JAR file
├── cardsTest.zip             # Test suite package
└── README.md
```

## 🎮 Game Strategy

Each player follows a simple strategy:
- **Preferred Cards**: Player i prefers cards with denomination i
- **Drawing**: Take card from deck to their left
- **Discarding**: Discard non-preferred card to deck on their right
- **No Hoarding**: Must not hold non-preferred cards indefinitely

## 📊 Output Files

The game generates multiple output files:

### Player Output Files
- **Format**: `player{i}_output.txt`
- **Content**: Action log for each player
- **Example**:
  ```
  player 1 initial hand 1 1 2 3
  player 1 draws a 4 from deck 1
  player 1 discards a 3 to deck 2
  player 1 current hand is 1 1 2 4
  player 1 wins
  player 1 exits
  player 1 final hand: 1 1 1 1
  ```

### Deck Output Files
- **Format**: `deck{i}_output.txt`
- **Content**: Final deck contents
- **Example**: `deck2 contents: 1 3 3 7`

## 🧪 Testing

### Running Tests
```bash
# Extract test suite
unzip cardsTest.zip

# Run tests (example with JUnit)
java -cp .:junit-4.12.jar:hamcrest-core-1.3.jar org.junit.runner.JUnitCore TestSuite
```

### Test Coverage
- Unit tests for all classes
- Thread safety testing
- Edge case handling
- Input validation
- Exception handling

## 🔧 Technical Features

### Thread Safety
- **Synchronized methods** for card operations
- **Thread-safe collections** for hands and decks
- **Atomic operations** for draw-discard actions

### Exception Handling
- Invalid pack file validation
- Robust input handling
- Graceful error messages

### Object-Oriented Design
- Clean separation of concerns
- Proper encapsulation
- Inheritance where appropriate

## 🏆 Victory Conditions

A player wins when they have:
- **4 cards of the same denomination** in their hand
- **Immediate win**: If dealt 4 matching cards at game start
- **Runtime win**: Through strategic play during the game

## 📝 Development Notes

### Pair Programming
This project was developed using pair programming methodology, promoting:
- Code quality through continuous review
- Knowledge sharing between developers
- Reduced bugs through collaborative debugging

### Version Control
- Git repository maintained throughout development
- Regular commits documenting progress
- Branch management for feature development

## 🚨 Known Limitations

- Multiple simultaneous winners not handled (by specification)
- Simple strategy implementation (not optimal play)
- Fixed ring topology structure

## 📄 License

This project is part of academic coursework for ECM2414 Software Development at the University of Exeter.
---

**Academic Year**: 2024/25  
**Module**: ECM2414 - Software Development  
**Institution**: University of Exeter
